c
exit
d.render
d = Display.new(dup_board)
dup_board = board.dup
move_dirs
exit
first_piece
@next_player
exit
board[poe
on_board?(new_pos)
new_pos
exit
direction
possible_moves
exit
board[new_pos].empty?
on_board?(new_pos)
new_pos = [pos[0]+1,pos[1]]
direction.each do |dx,dy|
pos
moves(direction)
attack_dirs
direction
c
@board[[1,3]]
@board[[1,3]].pos = ([2,3])
@board[[1,3]].pos([2,3])
@board[[1,3]]
@board[[1,1]]
@board[[1,2]]
exit
@board[[5,2]].move_dirs
exit
@board[[5,2]].move_dirs
exit
@board[[5,2]].move_dirs
exit
@board[[5,2]].move_dirs
exit
c
exit
valid_moves?(new_pos)
valid_moves(new_pos)
new_piece
n
new_pos
n
dy
dx
exit
@board[[5,2]].move_dirsexit
@board[[5,2]].move_dirs
@board[[5,2]]
exit
@board[[1,0]].move_dirs
exit
@board[[1,0]].moves([[1,0]])
@board[[1,0]].moves([[-1,0]])
@board[[1,0]].moves([-1,0])
@board[[1,0]].move_dirs
exit
@board[[1,0]].move_dirs
@board[[1,0]]
@board
board
'board
exit
String.colors
exit
c
@board[[0,0]].color
@board[[0,0]]
q
c
q
@board[[7,2]]
@board[[0,2]]
@board[[0,1]]
@board[[0,0]]
exit
@board[[0,0]]
exit
@board[[0,0]]
exit
@board[[0,0]].color
@board[[0,0]]
@board
exit
@board[[0,1]].length
@board[[0,1]]
@board[[0,0]]
@board[0][0]
board[0][0]
@board.pieces
@board
exit
c
board
